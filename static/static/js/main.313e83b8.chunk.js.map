{"version":3,"sources":["authentication.js","views/Dash.js","views/Login.js","views/Register.js","components/AuthRoute.js","App.js","serviceWorker.js","index.js","bone.png"],"names":["getAuthentication","jwt","decode","Cookies","get","authenticate","_ref2","Object","asyncToGenerator","regenerator_default","a","mark","_callee","_ref","username","password","res","resjson","wrap","_context","prev","next","fetch","apiURL","method","headers","Content-Type","body","JSON","stringify","sent","json","err","set","abrupt","Error","stop","_x","apply","this","arguments","register","_ref4","_callee2","_ref3","nickname","_context2","_x2","Dash","props","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","logout","bind","assertThisInitialized","remove","history","push","react_default","createElement","className","style","height","margin","card","user","primereact_button","onClick","label","Component","withRouter","Login","state","handleSubmit","event","preventDefault","alert","t0","_this2","src","boneLogo","alt","width","onSubmit","inputtext","value","placeholder","onChange","e","setState","target","type","react_router_dom","to","Register","AuthRoute","component","rest","objectWithoutProperties","react_router","assign","render","console","log","exp","Date","getTime","isAuthenticated","pathname","from","location","App","exact","path","components_AuthRoute","Boolean","window","hostname","match","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.313e83b8.chunk.js","sourcesContent":["import Cookies from 'js-cookie'\r\nimport jwt from 'jsonwebtoken'\r\n\r\nexport const apiURL = '/api'\r\n\r\nexport const getAuthentication = () => jwt.decode(Cookies.get('jwt'))\r\n\r\nexport const logout = () => Cookies.remove('jwt')\r\n\r\nexport const isAuthenticated = () => {\r\n    const jwt = getAuthentication()\r\n    console.log(jwt)\r\n    if(!jwt)\r\n        return false\r\n    const exp = jwt.exp\r\n    return new Date().getTime() < exp * 1000\r\n}\r\n\r\nexport const authenticate = async ({username, password}) => {\r\n    //try {\r\n        const res = await fetch(apiURL + '/login', {\r\n            method: 'POST',\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify({\r\n                username,\r\n                password\r\n            })\r\n        })\r\n    //} catch(e) {\r\n    //    throw e;\r\n    //}\r\n    const resjson = await res.json()\r\n    if(!resjson.err) {\r\n        Cookies.set('jwt', resjson.jwt)\r\n        return true\r\n    } else {\r\n        throw new Error(resjson.err)\r\n    }\r\n}\r\n\r\nexport const register = async ({username, nickname, password}) => {\r\n    const res = await fetch(apiURL + '/register', {\r\n        method: 'POST',\r\n        headers: {\r\n            \"Content-Type\": \"application/json\"\r\n        },\r\n        body: JSON.stringify({\r\n            username,\r\n            nickname,\r\n            password,\r\n        })\r\n    })\r\n    const resjson = await res.json()\r\n    if(!resjson.err) {\r\n        Cookies.set('jwt', resjson.jwt)\r\n        return true\r\n    } else {\r\n        return resjson.err\r\n        //throw new Error('Failed to authenticate')\r\n    }\r\n}","import React, { Component } from \"react\";\r\nimport { Card } from \"primereact/card\";\r\nimport { Button } from \"primereact/button\";\r\nimport { getAuthentication, logout } from \"../authentication\";\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\nclass Dash extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.logout = this.logout.bind(this);\r\n  }\r\n\r\n  logout() {\r\n    logout();\r\n    this.props.history.push(\"/\");\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div\r\n        className=\"p-grid p-justify-center p-align-center\"\r\n        style={{ height: \"100vh\", margin: \"10px\" }}\r\n      >\r\n        <Card className=\"p-col-12 p-md-4 p-no-gutter\">\r\n          <div className=\"p-grid p-dir-col p-no-gutter\">\r\n            <h1 className=\"p-col\">Welcome {getAuthentication().user}!</h1>\r\n            <Button onClick={this.logout} label=\"Sign out\" className=\"p-col\" />\r\n          </div>\r\n        </Card>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(Dash);\r\n","import React, { Component } from \"react\";\r\nimport { Card } from \"primereact/card\";\r\nimport { InputText } from \"primereact/inputtext\";\r\nimport { Button } from \"primereact/button\";\r\nimport { authenticate } from \"../authentication\";\r\nimport { withRouter, Link } from \"react-router-dom\";\r\nimport boneLogo from \"../bone.png\";\r\n\r\nclass Login extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      username: \"\",\r\n      password: \"\"\r\n    };\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  async handleSubmit(event) {\r\n    event.preventDefault();\r\n    try {\r\n      let authenticated = await authenticate({\r\n        username: this.state.username,\r\n        password: this.state.password\r\n      });\r\n      if (authenticated) {\r\n        this.props.history.push(\"/dash\");\r\n      }\r\n    } catch (e) {\r\n      alert(e);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div\r\n        className=\"p-grid p-justify-center p-align-center\"\r\n        style={{ height: \"100vh\", margin: \"10px\" }}\r\n      >\r\n        <Card className=\"p-col-12 p-md-4 p-no-gutter\">\r\n          <img src={boneLogo} alt=\"\" style={{width:'100%'}}/>\r\n          <form\r\n            onSubmit={this.handleSubmit}\r\n            className=\"p-grid p-dir-col p-no-gutter\"\r\n          >\r\n            <h1>Login</h1>\r\n            <InputText\r\n              className=\"p-col\"\r\n              value={this.state.username}\r\n              placeholder=\"Username\"\r\n              style={{ margin: \"5px\" }}\r\n              onChange={e => this.setState({ username: e.target.value })}\r\n            />\r\n            <InputText\r\n              className=\"p-col\"\r\n              type=\"password\"\r\n              value={this.state.password}\r\n              placeholder=\"Password\"\r\n              style={{ margin: \"5px\" }}\r\n              onChange={e => this.setState({ password: e.target.value })}\r\n            />\r\n\r\n            <Button\r\n              type=\"submit\"\r\n              label=\"Sign In\"\r\n              className=\"p-col\"\r\n              style={{ margin: \"5px\" }}\r\n            />\r\n            <p>or <Link to=\"/register\"> register</Link></p>\r\n          </form>\r\n        </Card>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(Login);\r\n","import React, { Component } from \"react\";\r\nimport { Card } from \"primereact/card\";\r\nimport { InputText } from \"primereact/inputtext\";\r\nimport { Button } from \"primereact/button\";\r\nimport { register } from \"../authentication\";\r\nimport { withRouter, Link } from \"react-router-dom\";\r\nimport boneLogo from \"../bone.png\";\r\n\r\nclass Register extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      username: \"\",\r\n      nickname: \"\",\r\n      password: \"\"\r\n    };\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  async handleSubmit(event) {\r\n    event.preventDefault();\r\n    try {\r\n      let authenticated = await register({\r\n        username: this.state.username,\r\n        nickname: this.state.nickname,\r\n        password: this.state.password\r\n      });\r\n      if (authenticated) {\r\n        this.props.history.push(\"/dash\");\r\n      }\r\n    } catch (e) {\r\n      alert(e);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div\r\n        className=\"p-grid p-justify-center p-align-center\"\r\n        style={{ height: \"100vh\", margin: \"10px\" }}\r\n      >\r\n        <Card className=\"p-col-12 p-md-4 p-no-gutter\">\r\n          <img src={boneLogo} alt=\"\" style={{width:'100%'}}/>\r\n          <form\r\n            onSubmit={this.handleSubmit}\r\n            className=\"p-grid p-dir-col p-no-gutter\"\r\n          >\r\n            <h1>Registration</h1>\r\n            <InputText\r\n              className=\"p-col\"\r\n              value={this.state.username}\r\n              placeholder=\"Username\"\r\n              style={{ margin: \"5px\" }}\r\n              onChange={e => this.setState({ username: e.target.value })}\r\n            />\r\n            <InputText\r\n              className=\"p-col\"\r\n              value={this.state.nickname}\r\n              placeholder=\"Nickname\"\r\n              style={{ margin: \"5px\" }}\r\n              onChange={e => this.setState({ nickname: e.target.value })}\r\n            />\r\n            <InputText\r\n              className=\"p-col\"\r\n              type=\"password\"\r\n              value={this.state.password}\r\n              placeholder=\"Password\"\r\n              style={{ margin: \"5px\" }}\r\n              onChange={e => this.setState({ password: e.target.value })}\r\n            />\r\n\r\n            <Button\r\n              type=\"submit\"\r\n              label=\"Register\"\r\n              className=\"p-col\"\r\n              style={{ margin: \"5px\" }}\r\n            />\r\n            <p>or <Link to=\"/login\"> login</Link></p>\r\n          </form>\r\n        </Card>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(Register);\r\n","import React from \"react\";\r\nimport { Redirect, Route } from \"react-router-dom\";\r\nimport { isAuthenticated } from \"../authentication\";\r\n\r\nconst AuthRoute = ({ component: Component, ...rest }) => {\r\n  return (\r\n    <Route\r\n      {...rest}\r\n      render={props =>\r\n        isAuthenticated() ? (\r\n          <Component {...props} />\r\n        ) : (\r\n          <Redirect\r\n            to={{ pathname: \"/login\", state: { from: props.location } }}\r\n          />\r\n        )\r\n      }\r\n    />\r\n  );\r\n};\r\n\r\nexport default AuthRoute;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport { BrowserRouter as Router, Route, Redirect } from \"react-router-dom\";\nimport Dash from \"./views/Dash\";\nimport Login from \"./views/Login\";\nimport Register from \"./views/Register\";\nimport AuthRoute from \"./components/AuthRoute\";\n\nfunction App() {\n  return (\n    <Router>\n      <Route exact path=\"/\" render={() => <Redirect to=\"/dash\" />} />\n      <Route path=\"/login\" exact component={Login} />\n      <Route path=\"/register\" exact component={Register} />\n      <AuthRoute path=\"/dash\" exact component={Dash}/>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'primereact/resources/themes/nova-light/theme.css';\nimport 'primereact/resources/primereact.min.css';\nimport 'primeflex/primeflex.css';\nimport 'primeicons/primeicons.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/bone.55f8019e.png\";"],"sourceRoot":""}